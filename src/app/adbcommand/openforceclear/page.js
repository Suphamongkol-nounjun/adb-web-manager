"use client";  // ‚úÖ ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Next.js Client Component

import { useState, useEffect } from "react";
import { Modal, Box, Button, Typography } from '@mui/material';
import { modalStyle, modalbuttonStyle,modalhoverButtonStyle } from "../openforceclear/modalStyle";
import AdbCommandGroup from "@/app/Components/ADBCommandGroup";

export default function adbcommand() {
  const [selectedFile, setSelectedFile] = useState(null);
  const [loadingDevices, setLoadingDevices] = useState(true); // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
  const [uploading, setUploading] = useState(false);
  const [message, setMessage] = useState("");
  const [existingFile, setExistingFile] = useState("");
  const [versionName, setVersionName] = useState(""); // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö versionName // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö currentVersion
  const [packageName, setPackageName] = useState(""); // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö packageName
  const [packageNameall, setPackageNameall] = useState([]); // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö packageName
  const [logMessage, setLogMessage] = useState(""); // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö log
  const [devices, setDevices] = useState([]); // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  const [installing, setInstalling] = useState(false);
  const [uninstalling, setUninstalling] = useState(false);
  const [openingApps, setOpeningApps] = useState(false); 
  const [forcingApps, setforcingApps] = useState(false);
  const [clearingApps, setclearingApps] = useState(false);
  const [loading, setLoading] = useState(false);
  const [open, setOpen] = useState(false);
  const [actionType, setActionType] = useState('');
  const [searchTerm, setSearchTerm] = useState(""); // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const [modaldeviceIp, setModalDeviceIp] = useState('');

  const handleOpen = (action, ip) => {
    setActionType(action);
    setModalDeviceIp(ip)
    setOpen(true);
  };
  const handleClose = () => setOpen(false);

  const handleConfirm = () => {
    if (actionType === 'Force Stop') {
      handleForceStopDevice(modaldeviceIp);
    } else if (actionType === 'Clear Data') {
      handleClearDataDevice(modaldeviceIp);
    } else if (actionType === 'Clear Data All') {
      handleClearDataAllDevices();
    } else if (actionType === 'Force Stop All') {
      handleForceStopAllDevices();
    }
     else {
      console.warn(`Unknown action type: ${actionType}`);
    }
  
    setOpen(false); // ‡∏õ‡∏¥‡∏î Modal ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
  };


  const fetchCheckversion = async (allDevices) => {
    try {
        
      const response = await fetch("/api/adbcommand/checkpackagedevices", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(allDevices),
      });
  
      if (!response.ok) throw new Error("Error fetching device versions");
  
      const data = await response.json();
    //   console.log("Response Data:", data); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  
      const updatedDevices = allDevices.map((device) => {
        // const deviceData = data.results.find((d) => d.ip === device.ip);
        // console.log("Device Data:", deviceData); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• deviceData
  
        return {
          ...device,
          status: "", // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ status ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        };
      });
  
      console.log("Updated Devices:", updatedDevices); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• updatedDevices
      setDevices(updatedDevices); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
    } catch (error) {
      console.error("Error fetching version name:", error);
    } finally {
      setLoadingDevices(false); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    }
  };
  
  const fetchPackages = async (devicesList) => {
    try {
      const response = await fetch("/api/adbcommand/adbchecklistpackage", {
        method: "POST",
        body: JSON.stringify(devicesList),
      });
  
      const data = await response.json();
      console.log("Response Data:", data); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  
      if (data.results && data.results.length > 0) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì allPackages
        const allPackages = data.results.reduce((acc, device) => {
          if (device.packages) {
            device.packages.forEach(pkg => {
              if (!acc.includes(pkg)) {
                acc.push(pkg); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              }
            });
          }
          return acc;
        }, []);
  
        console.log("üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", allPackages);
        setPackageNameall(allPackages); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï allPackages
  
        // Map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å data.results ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° package ‡πÑ‡∏õ‡πÉ‡∏ô devicesList
        const updatedDevicesList = devicesList.map((device) => {
          const deviceData = data.results.find((d) => {
            return device.ip === d.ip; // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö IP ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
          });
  
          if (deviceData && deviceData.packages) {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• package ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            device.packages = deviceData.packages;
          } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô data.results ‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô empty array ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            device.packages = [];
          }
  
          return device; // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        });
  
        console.log("Updated Devices List with Packages:", updatedDevicesList);
        setDevices(updatedDevicesList); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï devices state
        setLoadingDevices(false);
  
      } else {
        console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à");
      }
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à:", error);
    }
  };
  
  

  useEffect(() => {
    const storedDevices = localStorage.getItem("adbDevices");
    if (storedDevices) {
      let devicesList = JSON.parse(storedDevices);
  
      setLoadingDevices(true); // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  
      const fetchAdbDevices = async () => {
        try {
          const response = await fetch("/api/adbcommand/adbdevices", {
            method: "GET",
            headers: { "Content-Type": "application/json" },
          });
  
          if (!response.ok) throw new Error("Error fetching ADB devices");
  
          const data = await response.json();
          const adbDevices = data.devices;
          console.log("ADB Devices:", adbDevices);
  
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å API ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á map ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          devicesList.forEach((device) => {
            // ‡∏ï‡∏±‡∏î‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å IP ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            const deviceIp = device.ip.split(":")[0]; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 192.168.2.166:5555 ‡∏à‡∏∞‡πÑ‡∏î‡πâ 192.168.2.166
  
            const adbDevice = adbDevices.find((d) => {
              const adbDeviceIp = d.deviceId.split(":")[0]; // ‡∏ï‡∏±‡∏î‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å adbDevice.deviceId
              return adbDeviceIp === deviceIp; // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏Ñ‡πà IP
            });
  
            if (adbDevice) {
              let newStatus = device.status; // ‡∏Ñ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
  
              // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'device' ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô 'connect'
              if (adbDevice.status === "device") {
                newStatus = "Connect";
              }
              // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'unauthorized' ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô 'unauthorized'
              else if (adbDevice.status === "unauthorized") {
                newStatus = "Unauthorized";
              }
              // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'offline' ‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô 'offline'
              else if (adbDevice.status === "offline") {
                newStatus = "Offline";
              }
  
              // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô devicesList
              device.deviceStatus = newStatus; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô deviceStatus
            } else {
              // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô adbDevices, ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "offline"
              device.deviceStatus = "offline"; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô offline
            }
          });
  
          console.log("Updated Devices List:", devicesList);
  
          if (devicesList) {
            
  

           console.log("All Devices:", devicesList);    
            //  fetchCheckversion(devicesList);
          } else {
            console.log("Package name ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°");
            setLoadingDevices(false); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
          }
        } catch (error) {
          console.error("Error fetching ADB devices:", error);
          setLoadingDevices(false); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
        }
      };
  
      const fetchData = async () => {
        await fetchAdbDevices(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchAdbDevices ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
        await fetchPackages(devicesList); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchPackages ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å fetchAdbDevices ‡πÄ‡∏™‡∏£‡πá‡∏à
      };
  
      fetchData(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
      
    } else {
      setLoadingDevices(false); // ‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô localStorage
    }
  }, []);
  

const handleForceStopDevice = async (ip) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ packageName ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (!packageName) {
      setLogMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ
    const response = await fetch('/api/adbcommand/adbforcestop', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify([{ ip, packageName: packageName }]), // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• IP ‡πÅ‡∏•‡∏∞ package ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!response.ok) {
      setLogMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ');
      return;
    }

    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let done = false;
    let value = '';

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö streaming
    while (!done) {
      const { done: doneReading, value: chunk } = await reader.read();
      done = doneReading;
      value += decoder.decode(chunk, { stream: true });

      // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
      const messages = value.trim().split("\n");

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
      messages.forEach((msg) => {
        if (msg) {
          const data = JSON.parse(msg);
          console.log("üì¢ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API:", data);

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏Ñ‡πà status ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö IP
          setDevices(prevDevices =>
            prevDevices.map(device => 
              device.ip === data.ip ? { ...device, status: data.status } : device
            )
          );
          setLogMessage(prev => prev + `\n${data.ip} ${data.status}\n${data.adbMessage}`);
        }
      });
    }
  } catch (error) {
    console.error('‚ùå Error:', error);
    setLogMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
  }
  };
  


const handleForceStopAllDevices = async () => {
  setforcingApps(true); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
  const devicesData = devices.map(device => ({
    ip: device.ip,
    packageName: packageName, // ‡πÄ‡∏û‡∏¥‡πà‡∏° packageName ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô JSON
  }));

  const response = await fetch('/api/adbcommand/adbforcestop', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(devicesData), // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ip ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  if (!response.ok) {
    setLogMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
    setOpeningApps(false);
    return;
  }

  const reader = response.body.getReader();
  const decoder = new TextDecoder();
  let done = false;
  let value = '';

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö streaming
  while (!done) {
    const { done: doneReading, value: chunk } = await reader.read();
    done = doneReading;
    value += decoder.decode(chunk, { stream: true });

    // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    const messages = value.trim().split("\n");

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    messages.forEach((msg) => {
      if (msg) {
        const data = JSON.parse(msg);
        console.log("üì¢ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API:", data);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏Ñ‡πà status ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö IP
        setDevices(prevDevices =>
          prevDevices.map(device => 
            device.ip === data.ip ? { ...device, status: data.status } : device
          )
        );
        setLogMessage(prev => prev + `\n${data.ip} ${data.status}\n${data.adbMessage}`);
      }
    });
  }

  setforcingApps(false); // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
};


const handleClearDataDevice = async (ip) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ packageName ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (!packageName) {
      setLogMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ
    const response = await fetch('/api/adbcommand/adbcleardata', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify([{ ip, packageName: packageName }]), // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• IP ‡πÅ‡∏•‡∏∞ package ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!response.ok) {
      setLogMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ');
      return;
    }

    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let done = false;
    let value = '';

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö streaming
    while (!done) {
      const { done: doneReading, value: chunk } = await reader.read();
      done = doneReading;
      value += decoder.decode(chunk, { stream: true });

      // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
      const messages = value.trim().split("\n");

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
      messages.forEach((msg) => {
        if (msg) {
          const data = JSON.parse(msg);
          console.log("üì¢ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API:", data);

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏Ñ‡πà status ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö IP
          setDevices(prevDevices =>
            prevDevices.map(device => 
              device.ip === data.ip ? { ...device, status: data.status } : device
            )
          );
          setLogMessage(prev => prev + `\n${data.ip} ${data.status}\n${data.adbMessage}`);
        }
      });
    }
  } catch (error) {
    console.error('‚ùå Error:', error);
    setLogMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
  }
};

const handleClearDataAllDevices = async () => {
  setclearingApps(true); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
  const devicesData = devices.map(device => ({
    ip: device.ip,
    packageName: packageName, // ‡πÄ‡∏û‡∏¥‡πà‡∏° packageName ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô JSON
  }));

  const response = await fetch('/api/adbcommand/adbcleardata', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(devicesData), // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ip ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  if (!response.ok) {
    setLogMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
    setOpeningApps(false);
    return;
  }

  const reader = response.body.getReader();
  const decoder = new TextDecoder();
  let done = false;
  let value = '';

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö streaming
  while (!done) {
    const { done: doneReading, value: chunk } = await reader.read();
    done = doneReading;
    value += decoder.decode(chunk, { stream: true });

    // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    const messages = value.trim().split("\n");

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    messages.forEach((msg) => {
      if (msg) {
        const data = JSON.parse(msg);
        console.log("üì¢ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API:", data);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏Ñ‡πà status ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö IP
        setDevices(prevDevices =>
          prevDevices.map(device => 
            device.ip === data.ip ? { ...device, status: data.status } : device
          )
        );
        setLogMessage(prev => prev + `\n${data.ip} ${data.status}\n${data.adbMessage}`);
      }
    });
  }

  setclearingApps(false); // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
};

const handleOpenApp = async (ip) => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ packageName ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (!packageName) {
        setLogMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏Å‡πà‡∏≠‡∏ô');
        return;
      }
  
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ
      const response = await fetch('/api/adbcommand/adbopenapp', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify([{ ip, packageName: packageName }]), // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• IP ‡πÅ‡∏•‡∏∞ package ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      });
  
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!response.ok) {
        setLogMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ');
        return;
      }
  
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let done = false;
      let value = '';
  
      // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö streaming
      while (!done) {
        const { done: doneReading, value: chunk } = await reader.read();
        done = doneReading;
        value += decoder.decode(chunk, { stream: true });
  
        // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        const messages = value.trim().split("\n");
  
        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        messages.forEach((msg) => {
          if (msg) {
            const data = JSON.parse(msg);
            console.log("üì¢ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API:", data);
  
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏Ñ‡πà status ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö IP
            setDevices(prevDevices =>
              prevDevices.map(device => 
                device.ip === data.ip ? { ...device, status: data.status } : device
              )
            );
            setLogMessage(prev => prev + `\n${data.ip} ${data.status}\n${data.adbMessage}`);
          }
        });
      }
    } catch (error) {
      console.error('‚ùå Error:', error);
      setLogMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    }
  };
  

const handleOpenAllApps = async () => {
  setOpeningApps(true); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
  const devicesData = devices.map(device => ({
    ip: device.ip,
    packageName: packageName, // ‡πÄ‡∏û‡∏¥‡πà‡∏° packageName ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô JSON
  }));

  const response = await fetch('/api/adbcommand/adbopenapp', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(devicesData), // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ip ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  if (!response.ok) {
    setLogMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
    setOpeningApps(false);
    return;
  }

  const reader = response.body.getReader();
  const decoder = new TextDecoder();
  let done = false;
  let value = '';

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö streaming
  while (!done) {
    const { done: doneReading, value: chunk } = await reader.read();
    done = doneReading;
    value += decoder.decode(chunk, { stream: true });

    // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    const messages = value.trim().split("\n");

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    messages.forEach((msg) => {
      if (msg) {
        const data = JSON.parse(msg);
        console.log("üì¢ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API:", data);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏Ñ‡πà status ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö IP
        setDevices(prevDevices =>
          prevDevices.map(device => 
            device.ip === data.ip ? { ...device, status: data.status } : device
          )
        );
        setLogMessage(prev => prev + `\n${data.ip} ${data.status}\n${data.adbMessage}`);
      }
    });
  }

  setOpeningApps(false); // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
};

useEffect(() => {

    if (packageName) {
      // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å packageName
      console.log(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à: ${packageName}`);
      setLogMessage(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à: ${packageName}`);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å devices ‡∏ï‡∏≤‡∏° ip
      devices.forEach((device) => {
        console.log(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á IP: ${device.ip}`);
        
        // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á package ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ device
        const selectedPackage = device.packages.find(pkg => pkg === packageName);
        if (selectedPackage) {
          console.log(`‡∏°‡∏µ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${selectedPackage} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IP: ${device.ip}`);
          setLogMessage(prev => prev + `\n‡∏°‡∏µ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à ${packageName} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IP: ${device.ip}`);
          device.status = "‡∏°‡∏µ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à";
        } else {
          console.log(`‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à ${packageName} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IP: ${device.ip}`);
          setLogMessage(prev => prev + `\n‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à ${packageName} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IP: ${device.ip}`);
          device.status = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à";
        }
      });
      setDevices([...devices]);
    }
  }, [packageName]); // useEffect ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ packageName ‡∏´‡∏£‡∏∑‡∏≠ devices ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  
  const handleSelectChange = (event) => {
    setPackageName(event.target.value);
  };

  const filteredPackages = packageNameall.filter(pkg =>
    pkg.toLowerCase().includes(searchTerm.toLowerCase()) // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  );
  

return (


  <div>
    <main className="flex flex-col items-center justify-start min-h-screen p-8 gap-7 sm:p-20">
            {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô */}
            <div className="alert-message text-center mb-4 text-yellow-600 font-medium">
            <h2 className="text-3xl font-semibold text-center text-blue-600 mb-6">
   Open App / Force Stop / Clear Data
</h2>
        <p>
          ‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏Å‡∏î <strong>Force Stop</strong> ‡∏´‡∏£‡∏∑‡∏≠ <strong>Clear Data</strong> <br></br>‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        </p>
      </div>

      <div className="package-dropdown mt-8 w-full max-w-4xl border p-6 rounded-lg border-gray-300 shadow-lg">
      <h3 className="font-semibold text-xl mb-4 text-center">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h3>
      <div className="relative">
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à..."
          value={searchTerm} // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
          onChange={(e) => setSearchTerm(e.target.value)} // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
          className="block w-full p-3 border border-gray-300 rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />

        <select
          value={packageName} // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô packageName
          onChange={handleSelectChange} // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤
          className="block w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à</option>
          {filteredPackages.length > 0 ? (
            filteredPackages.map((pkg) => (
              <option key={pkg} value={pkg} className="hover:bg-gray-200">
                {pkg} {/* ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á */}
              </option>
            ))
          ) : (
            <option disabled>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</option> // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
          )}
        </select>

        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
        {packageName && (
          <div className="mt-2 text-center text-green-500">
            <p>‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {packageName}</p>
          </div>
        )}
      </div>
    </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå */}
      <h2 className="font-semibold text-lg mt-4">üìã ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö:</h2>
      <table className="w-full max-w-4xl border-collapse shadow-lg rounded-lg overflow-hidden mt-4">
        <thead>
          <tr className="bg-blue-500 text-white text-center">
            <th className="px-4 py-3">#</th>
            <th className="px-4 py-3">IP Address</th>
            <th className="px-4 py-3">Device Status</th>
            <th className="px-4 py-3 min-w-[220px]">Status</th>
            <th className="px-4 py-3 min-w-[150px]">Force Stop</th>
            <th className="px-4 py-3 min-w-[150px]">Clear Data</th>
            <th className="px-4 py-3 min-w-[150px]">Open App</th>
          </tr>
        </thead>
        <tbody>
          {loadingDevices ? (
            <tr>
  <td colSpan="7" className="text-center p-4 align-middle">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</td>
</tr>
          ) : devices.length > 0 ? (
            devices.map((device, index) => (
              <tr key={index} className={`${index % 2 === 0 ? "bg-gray-100" : "bg-white"} hover:bg-gray-200`}>
                <td className="border px-4 py-3 text-center">{index + 1}</td>
                <td className="border px-4 py-3 text-center">{device.ip}</td>
                <td className="border px-4 py-3 text-center">
                  {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å device.deviceStatus */}
                  {device.deviceStatus === "offline"
                    ? "Offline"
                    : device.deviceStatus === "unauthorized"
                    ? "Unauthorized"
                    : device.deviceStatus}
                </td>
                <td className="border px-4 py-3 text-center">{device.status || "N/A"}</td>
                <td className="border px-4 py-3 text-center">
                  <button
                    onClick={() => handleOpen('Force Stop', device.ip)}
                    sx={{ ...modalbuttonStyle, ...modalhoverButtonStyle, backgroundColor: '#f57c00', color: 'white' }}
                    className="px-4 py-2 rounded text-white bg-orange-500 hover:bg-orange-600"
                  >
                    Force Stop
                  </button>
                </td>
                <td className="border px-4 py-3 text-center">
                  <button
                    onClick={() => handleOpen('Clear Data', device.ip)}
                    sx={{ ...modalbuttonStyle, ...modalhoverButtonStyle, backgroundColor: '#d32f2f', color: 'white' }}
                    className="px-4 py-2 rounded text-white bg-red-500 hover:bg-red-600"
                  >
                    Clear Data
                  </button>
                </td>
                <td className="border px-4 py-3 text-center">
                  {/* ‡∏õ‡∏∏‡πà‡∏° Openapp ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô */}
                  <button
                    onClick={() => handleOpenApp(device.ip)} // ‡πÄ‡∏ß‡πâ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ
                    className="px-4 py-2 rounded text-white bg-yellow-500 hover:bg-yellow-600"
                  >
                    Open App
                  </button>
                </td>
              </tr>
            ))
          ) : (
<tr>
  <td colSpan="7" className="text-center p-4 align-middle">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô</td>
</tr>
          )}
        </tbody>
      </table>

{/* ‡∏õ‡∏∏‡πà‡∏° Install all devices, Uninstall all devices ‡πÅ‡∏•‡∏∞ Open all apps */}
<div className="flex justify-center gap-4 mt-8">
  <button
    onClick={() => handleOpen('Force Stop All')}
    sx={{ ...modalbuttonStyle, ...modalhoverButtonStyle, backgroundColor: '#f57c00', color: 'white' }}
    disabled={forcingApps}
    className="px-6 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:bg-gray-400"
  >
    {forcingApps ? "Force Stopping..." : "Force Stop all devices"}
  </button>

  <button
    onClick={() => handleOpen('Clear Data All')}
    sx={{ ...modalbuttonStyle, ...modalhoverButtonStyle, backgroundColor: '#d32f2f', color: 'white' }}
    disabled={clearingApps}
    className="px-6 py-2 bg-red-500 text-white rounded hover:bg-red-600 disabled:bg-gray-400"
  >
    {clearingApps ? "Clearing data..." : "Clear Data all devices"}
  </button>

  {/* ‡∏õ‡∏∏‡πà‡∏° Open all apps */}
  <button
    onClick={handleOpenAllApps}
    disabled={openingApps}
    className="px-6 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 disabled:bg-gray-400"
  >
    {openingApps ? "Opening..." : "Open all apps"}
  </button>
</div>

      {/* Modal */}
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-title"
        aria-describedby="modal-description"
      >
        <Box sx={modalStyle}>
          <Typography
            id="modal-title"
            variant="h6"
            component="h2"
            sx={{ fontWeight: 'bold', color: '#333', textAlign: 'center' }}
          >
            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
          </Typography>
          <Typography
            id="modal-description"
            sx={{
              mt: 2,
              color: '#666',
              textAlign: 'center',
              fontSize: '16px',
              lineHeight: '1.5',
            }}
          >
            ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£ {actionType} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
          </Typography>
          <div className="flex justify-center gap-4 mt-4">
            <Button
              onClick={handleConfirm}
              sx={{
                ...modalbuttonStyle,
                backgroundColor: '#388e3c',
                color: 'white',
                '&:hover': {
                  backgroundColor: '#2e7d32',
                },
              }}
            >
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            </Button>
            <Button
              onClick={handleClose}
              sx={{
                ...modalbuttonStyle,
                backgroundColor: '#757575',
                color: 'white',
                '&:hover': {
                  backgroundColor: '#616161',
                },
              }}
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
          </div>
        </Box>
      </Modal>

      <AdbCommandGroup />

      {/* Log ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å API */}
      <div className="mt-4 text">
        <p className="font-semibold">Log ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å API:</p>
        <pre className="text-sm bg-gray-100 p-6 rounded-lg border border-gray-300 shadow-lg w-full max-w-4xl overflow-auto">
          {logMessage}
        </pre>
      </div>

    </main>
    <div className="footer-instructions bg-gray-100 text-blue-600 font-medium py-4 mt-6">
      <div className="max-w-3xl mx-auto text-left">
    <p>
      üì± ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô ADB ‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô Force Stop, Clear Data ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ.<br />
      <strong>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:</strong><br />
      1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å <strong>‡∏ä‡∏∑‡πà‡∏≠ Package</strong> ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£.<br />
      2. ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå.<br />
      3. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡πà‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà.<br />
      4. ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà <strong>Force Stop</strong>, <strong>Clear Data</strong>, ‡∏´‡∏£‡∏∑‡∏≠ <strong>Open App</strong>.<br />
      5. ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠.<br />
      ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå.
    </p>
  </div>
</div>
  </div>
);

}
