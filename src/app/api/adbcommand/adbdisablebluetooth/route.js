import { exec } from 'child_process';
import path from 'path';

export async function POST(req) {
  try {
    const devices = await req.json(); // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å body

    if (!devices || devices.length === 0) {
      return new Response(
        JSON.stringify({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• IP' }),
        { status: 400 }
      );
    }

    const adbPath = path.join(process.cwd(), 'src', 'platform-tools', 'adb'); // ‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á adb

    const stream = new ReadableStream({
      start(controller) {
        (async () => {
          for (let device of devices) {
            const { ip } = device; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ ip
            console.log(`üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Bluetooth ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ IP: ${ip}`);

            try {
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Bluetooth ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á dumpsys
              const bluetoothStatus = await new Promise((resolve, reject) => {
                exec(
                  `"${adbPath}" -s ${ip} shell dumpsys bluetooth_manager`,
                  (err, stdout, stderr) => {
                    if (err || stderr) {
                      reject(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bluetooth ‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà ${ip}`);
                    }
                    resolve(stdout);
                  }
                );
              });

              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Bluetooth ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              if (bluetoothStatus.includes('enabled: false')) {
                const message = `Bluetooth ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà ${ip} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ`;
                console.log(message);
                const result = { ip, status: 'Bluetooth ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß', message };
                controller.enqueue(new TextEncoder().encode(JSON.stringify(result) + "\n"));
                continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏õ
              }

              // ‡∏ñ‡πâ‡∏≤ Bluetooth ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î Bluetooth
              console.log(`üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î Bluetooth ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ IP: ${ip}`);

              // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î Bluetooth
              const result = await new Promise((resolve) => {
                exec(
                  `"${adbPath}" -s ${ip} shell am start -a android.bluetooth.adapter.action.REQUEST_DISABLE`,
                  (err, stdout, stderr) => {
                    let status = '‡∏õ‡∏¥‡∏î Bluetooth ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
                    let message = `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î Bluetooth ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà ${ip} ‡πÑ‡∏î‡πâ`;
                    let adbMessage = `adb message: ${stdout}`;

                    if (!err) {
                      status = '‡∏õ‡∏¥‡∏î Bluetooth ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
                      message = `‡∏õ‡∏¥‡∏î Bluetooth ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà ${ip} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`;
                    }

                    resolve({ ip, status, message, adbMessage });
                  }
                );
              });

              // ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Enter" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Bluetooth
              exec(
                `"${adbPath}" -s ${ip} shell input keyevent KEYCODE_ENTER`,
                (err, stdout, stderr) => {
                  if (err) {
                    console.error('‚ùå Error: ', stderr);
                  }
                }
              );

              const messageToSend = JSON.stringify(result) + "\n";
              controller.enqueue(new TextEncoder().encode(messageToSend));
            } catch (error) {
              console.error('‚ùå Error:', error);
              const errorMessage = JSON.stringify({
                ip: device.ip,
                status: '‡∏õ‡∏¥‡∏î Bluetooth ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î Bluetooth ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà ${ip} ‡πÑ‡∏î‡πâ`,
                adbMessage: `error: ${error.message}`,
              }) + "\n";
              controller.enqueue(new TextEncoder().encode(errorMessage));
            }
          }
          controller.close();
        })().catch((err) => {
          console.error('Stream error:', err);
          controller.error(err);
        });
      }
    });

    return new Response(stream, {
      headers: { 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Error:', error);
    return new Response(
      JSON.stringify({
        status: 'error',
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Bluetooth',
        error: error.message,
      }),
      { status: 500 }
    );
  }
}
