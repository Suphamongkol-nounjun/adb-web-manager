import { exec } from 'child_process';
import path from 'path';

export async function POST(req) {
  try {
    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å body
    const devices = await req.json();

    if (!devices || devices.length === 0) {
      return new Response(
        JSON.stringify({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• IP ‡πÅ‡∏•‡∏∞ packageName' }),
        { status: 400 }
      );
    }

    const adbPath = path.join(process.cwd(), 'src', 'platform-tools', 'adb'); // ‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á adb

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á ReadableStream ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á frontend ‡πÅ‡∏ö‡∏ö real-time
    const stream = new ReadableStream({
      start(controller) {
        (async () => {
          try {
            for (const device of devices) {
              const { ip, packageName } = device;

              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ip ‡πÅ‡∏•‡∏∞ packageName ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              if (!ip || !packageName) {
                const errorMessage = JSON.stringify({
                  ip: ip || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö IP",
                  status: '‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                  message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• IP ‡∏´‡∏£‡∏∑‡∏≠ Package Name ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                }) + "\n";
                controller.enqueue(new TextEncoder().encode(errorMessage));
                continue;
              }

              console.log(`üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á APK ‡∏ó‡∏µ‡πà ${packageName} ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ IP: ${ip}`);

              try {
                const result = await new Promise((resolve) => {
                  exec(`${adbPath} -s ${ip} uninstall ${packageName}`, (err, stdout, stderr) => {
                    let status = '‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
                    let message = `‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á APK ‡∏ó‡∏µ‡πà ${packageName} ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà ${ip} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`;
                    let adbMessage = `adb message: ${stdout || stderr}`;

                    if (err || stderr) {
                      status = '‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
                      message = `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á APK ‡∏ó‡∏µ‡πà ${packageName} ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà ${ip} ‡πÑ‡∏î‡πâ`;
                    }

                    resolve({ ip, status, message, adbMessage });
                  });
                });

                // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á frontend
                const messageToSend = JSON.stringify(result) + "\n";
                controller.enqueue(new TextEncoder().encode(messageToSend));
              } catch (execError) {
                console.error('‚ùå Exec Error:', execError);
                const errorMessage = JSON.stringify({
                  ip,
                  status: '‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                  message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á APK ‡∏ó‡∏µ‡πà ${packageName} ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà ${ip} ‡πÑ‡∏î‡πâ`,
                  adbMessage: `error: ${execError.message}`,
                }) + "\n";
                controller.enqueue(new TextEncoder().encode(errorMessage));
              }
            }
            controller.close();
          } catch (streamError) {
            console.error('‚ùå Stream Error:', streamError);
            controller.error(streamError);
          }
        })().catch((err) => {
          console.error('‚ùå Unhandled Error:', err);
          controller.error(err);
        });
      }
    });

    return new Response(stream, {
      headers: { 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå API Error:', error);
    return new Response(
      JSON.stringify({
        status: 'error',
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á APK',
        error: error.message,
      }),
      { status: 500 }
    );
  }
}
