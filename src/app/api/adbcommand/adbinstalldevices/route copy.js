import { exec } from "child_process";
import path from "path";

export async function POST(req) {
  try {
    const devices = await req.json();

    if (!devices || devices.length === 0) {
      return new Response(
        JSON.stringify({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• IP ‡πÅ‡∏•‡∏∞ existingFile" }),
        { status: 400 }
      );
    }

    const adbPath = path.join(process.cwd(), "src", "platform-tools", "adb");

    // ‚úÖ ‡πÉ‡∏ä‡πâ ReadableStream ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    const stream = new ReadableStream({
      async start(controller) {
        for (let device of devices) {
          const { ip, existingFile, version, currentversion } = device;
          const apkPath = path.join(
            process.cwd(),
            "src",
            "platform-tools",
            "adb",
            existingFile
          );

          // üîπ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
          controller.enqueue(
            JSON.stringify({
              ip,
              status: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á",
              message: `üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á APK ‡∏ó‡∏µ‡πà ${apkPath} ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ IP: ${ip}`,
            }) + "\n"
          );

          await new Promise((resolve) => {
            exec(
              `${adbPath} -s ${ip} install ${apkPath}`,
              (err, stdout, stderr) => {
                let status = "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
                let message = `‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á APK ‡∏ó‡∏µ‡πà ${apkPath} ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ${ip} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`;
                let versionDevice = version;

                if (err || stderr) {
                  if ((stderr || err).includes("INSTALL_FAILED_VERSION_DOWNGRADE")) {
                    status = "‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà";
                    message = `‚ùå ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á APK ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ${ip}`;
                    versionDevice = currentversion;
                  } else {
                    status = "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
                    message = `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á APK ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ${ip} ‡πÑ‡∏î‡πâ` + (stderr || err);
                    versionDevice = currentversion;
                  }
                }


                // üîπ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
                controller.enqueue(
                  JSON.stringify({ ip, status, message, version: versionDevice }) + "\n"
                );

                resolve();
              }
            );
          });
        }

        controller.close();
      },
    });

    return new Response(stream, {
      status: 200,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  } catch (error) {
    console.error("‚ùå Error:", error);
    return new Response(
      JSON.stringify({
        status: "error",
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á APK",
        error: error.message,
      }),
      { status: 500 }
    );
  }
}
