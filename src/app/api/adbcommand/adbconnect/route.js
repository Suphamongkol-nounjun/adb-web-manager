import { exec } from 'child_process';
import path from 'path';

export async function POST(req) {
  try {
    // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ IP ‡∏à‡∏≤‡∏Å body
    const { ip } = await req.json();

    if (!ip) {
      return new Response(
        JSON.stringify({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ IP' }),
        { status: 400 }
      );
    }

    const adbPath = path.join(process.cwd(), 'src', 'platform-tools', 'adb'); // ‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á adb

    console.log(`üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ADB ‡πÑ‡∏õ‡∏ó‡∏µ‡πà ${ip}`);

    const result = await new Promise((resolve) => {
      exec(`${adbPath} connect ${ip}`, (error, stdout, stderr) => {
        let status = 'connected'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        let message = `‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ADB ‡∏Å‡∏±‡∏ö ${ip} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`;
        let meaagefromadb = `adb message: ${stdout}`;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stdout ‡∏ß‡πà‡∏≤‡∏°‡∏µ "cannot connect to" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (stdout.includes('cannot connect to')) {
          status = "can't connect";
          message = `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ADB ‡∏Å‡∏±‡∏ö ${ip}`;
          meaagefromadb = `adb message: ${stdout}`;
        }

        console.log(message);
        resolve({ ip, status, message, meaagefromadb });
      });
    });

    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return new Response(
      JSON.stringify(result), // ‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà result ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  } catch (error) {
    console.error('‚ùå Error:', error);
    return new Response(
      JSON.stringify({
        status: 'error',
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ADB',
        error: error.message,
      }),
      { status: 500 }
    );
  }
}
