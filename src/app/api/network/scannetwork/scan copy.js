import pkg from 'node-nmap';
import fs from 'fs';
import path from 'path';
import os from 'os';  // ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á IP ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á

const { NmapScan } = pkg;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ IP ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
export function getLocalIp() {
  const interfaces = os.networkInterfaces();
  let ipAddress = '';
  for (let interfaceName in interfaces) {
    for (let interfaceDetails of interfaces[interfaceName]) {
      if (interfaceDetails.family === 'IPv4' && !interfaceDetails.internal) {
        ipAddress = interfaceDetails.address;
        break;
      }
    }
  }
  return ipAddress;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πÅ‡∏Å‡∏ô IP ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
export async function scanNetwork(localIp) {
  const subnet = localIp.substring(0, localIp.lastIndexOf('.')) + '.0/24'; // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì subnet ‡∏à‡∏≤‡∏Å IP ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å argument

  console.log(`üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢: ${subnet}`);

  const scan = new NmapScan(subnet, '-sn -n'); // -sn = Scan ‡πÅ‡∏ö‡∏ö Ping Sweep, -n = ‡πÑ‡∏°‡πà‡∏ó‡∏≥ DNS resolution

  // ‡πÉ‡∏ä‡πâ Promise ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
  return new Promise((resolve, reject) => {
    scan.on('complete', function (data) {
      const results = data.map(device => ({
        ip: device.ip,
        mac: device.mac || '‡πÑ‡∏°‡πà‡∏û‡∏ö',  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MAC address
        hostname: device.hostname || '‡πÑ‡∏°‡πà‡∏û‡∏ö'
      }));

      // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ IP, MAC address, ‡πÅ‡∏•‡∏∞ Hostname
      console.log('‚úÖ ‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢:');
      results.forEach(result => {
        console.log(`- IP: ${result.ip}, MAC: ${result.mac}, Hostname: ${result.hostname}`);
      })
      resolve(results);
    });
    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
    scan.on('error', function (error) {
      console.log('‚ùå Error:', error);
      reject(error);  // reject ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    });
  });
}
